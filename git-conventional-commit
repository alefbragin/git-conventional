#!/bin/sh

PROGRAM='git conventional commit'
VERSION=0.1.2

ERROR_MISSING_TYPE='missing commit type'
ERROR_MISSING_COLON="missing ':' separator"
ERROR_UNAVAILABLE_TYPE="unavailable commit type: '%s'"
ERROR_UNAVAILABLE_SCOPE="unavailable commit scope: '%s'"
ERROR_CANNOT_GET_CONFIG='cannot get git config'

die() {
	printf "${PROGRAM}: $1\n" "$2" 1>&2
	exit 1
}

process_scope() {
	if [ -z "${config_scopes}" ]; then
		config_scopes="$(git config --get conventional.scopes)" || die "${ERROR_CANNOT_GET_CONFIG}"
		for config_scope in ${config_scopes}; do
			eval "config_scopes_${config_scope}=1"
		done
	fi

	eval "[ \"\${config_scopes_${1}}\" = 1 ]" || die "${ERROR_UNAVAILABLE_SCOPE}" "$1"

	if [ "${sort_scopes}" = no ] && eval "[ \"\${scopes_${1}}\" != 1 ]"; then
		scopes="${scopes}${1} "
	fi

	eval "scopes_${1}=1"
}

format_scopes() {
	if [ $# -gt 0 ]; then
		formated_scopes="($1" && shift
		for scope; do
			formated_scopes="${formated_scopes},${scope}"
		done
		formated_scopes="${formated_scopes})"
	fi
}

cmd_conventional_commit() {
	config_types="$(git config --get conventional.types)" || die "${ERROR_CANNOT_GET_CONFIG}"
	for config_type in ${config_types}; do
		eval "config_types_${config_type}=1"
	done

	args="$(getopt --name "${PROGRAM}" \
		--options basvu:c:C:eioS: \
		--longoptions breaking,no-sort-scopes \
		--longoptions interactive,patch,amend,dry-run,squash:,fixup:,reset-author \
		--longoptions allow-empty,allow-empty-message,no-verify,author:,date:,cleanup: \
		--longoptions status,no-status,pathspec-from-file:,pathspec-file-nul,trailer: \
		-- "$@")" || exit 1

	eval set -- "${args}"

	while :; do case "$1" in
		-b|--breaking)
			bang=!
			shift
		;;
		--no-sort-scopes)
			sort_scopes=no
			shift
		;;
		-u|-c|-C|-S|--squash|--fixup|--author|--date|--cleanup|--pathspec-from-file|--trailer)
			value="$(
				sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" <<- EOF
					$2
				EOF
			)"
			options="${options} ${1} ${value}"
			shift 2
		;;
		--)
			shift && break
		;;
		*)
			options="${options} ${1}"
			shift
		;;
	esac done

	type="${0##*/git-}"
	if [ "${type}" = conventional-commit ]; then
		type="$1"
		shift 2> /dev/null || die "${ERROR_MISSING_TYPE}"
	fi

	case "${type}" in
		''|:|!|!:)
			die "${ERROR_MISSING_TYPE}"
		;;
		*!:)
			type="${type%!:}"
			bang='!'
		;;
		*:)
			type="${type%:}"
		;;
		*!)
			type="${type%!}"
			bang='!'
			case "$*" in
				*:*) scan_scopes=yes ;;
			esac
		;;
		*)
			case "$*" in
				*:*) scan_scopes=yes ;;
			esac
		;;
	esac

	eval "[ \"\${config_types_${type}}\" = 1 ]" || die "${ERROR_UNAVAILABLE_TYPE}" "${type}"

	if [ "${scan_scopes}" = yes ]; then
		while :; do case "$1" in
			!:)
				bang='!'
				shift && break
			;;
			:)
				shift && break
			;;
			!)
				[ "$2" = ':' ] || die "${ERROR_MISSING_COLON}"
				bang='!'
				shift 2 && break
			;;
			*!:)
				process_scope "${1%!:}"
				bang='!'
				shift && break
			;;
			*:)
				process_scope "${1%:}"
				shift && break
			;;
			*!)
				[ "$2" = ':' ] || die "${ERROR_MISSING_COLON}"
				process_scope "${1%!}"
				bang='!'
				shift 2 && break
			;;
			*)
				process_scope "$1"
				shift
			;;
		esac done
	fi

	if [ "${sort_scopes}" != no ]; then
		for scope in ${config_scopes}; do if eval "[ \"\${scopes_${scope}}\" = 1 ]"; then
			scopes="${scopes}${scope} "
		fi done
	fi

	format_scopes ${scopes}

	eval "git commit ${options} --message=\"\${type}\${formated_scopes}\${bang}:\${*:+ \$*}\""
}

cmd_print_version() {
	[ $# -eq 0 ] || die "extra argument: '$1'"
	printf 'git-conventional-commit version %s\n' "${VERSION}"
}

case "$1" in
	--version|-v) shift; cmd_print_version "$@" ;;
	*) cmd_conventional_commit "$@" ;;
esac
