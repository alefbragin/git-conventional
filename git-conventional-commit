#!/bin/sh

PROGRAM='git conventional commit'
VERSION=0.1.1

ERROR_MISSING_TYPE='missing commit type'
ERROR_MISSING_COLON="missing ':' separator"
ERROR_UNAVAILABLE_TYPE="unavailable commit type: '%s'"
ERROR_CANNOT_GET_CONFIG='cannot get git config'

die() {
	printf "${PROGRAM}: $1\n" "$2" 1>&2
	exit 1
}

cmd_conventional_commit() {
	config_types="$(git config --get convention.types)" || die "${ERROR_CANNOT_GET_CONFIG}"
	for config_type in ${config_types}; do
		eval "types_${config_type}=1"
	done

	args="$(getopt --name "${PROGRAM}" \
		--options basvu:c:C:eioS: \
		--longoptions breaking \
		--longoptions interactive,patch,amend,dry-run,squash:,fixup:,reset-author \
		--longoptions allow-empty,allow-empty-message,no-verify,author:,date:,cleanup: \
		--longoptions status,no-status,pathspec-from-file:,pathspec-file-nul,trailer: \
		-- "$@")" || exit 1

	eval set -- "${args}"

	while :; do case "$1" in
		-b|--breaking)
			bang=!
			shift
		;;
		-u|-c|-C|-S|--squash|--fixup|--author|--date|--cleanup|--pathspec-from-file|--trailer)
			value="$(
				sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/'/" <<- EOF
					$2
				EOF
			)"
			options="${options} ${1} ${value}"
			shift 2
		;;
		--)
			shift && break
		;;
		*)
			options="${options} ${1}"
			shift
		;;
	esac done

	type="${0##*/git-}"
	if [ "${type}" = conventional-commit ]; then
		type="$1"
		shift 2> /dev/null || die "${ERROR_MISSING_TYPE}"
	fi

	case "${type}" in
		*!:)
			type="${type%!:}"
			bang='!'
		;;
		*:)
			type="${type%:}"
		;;
		*!)
			type="${type%!}"
			bang='!'
			case "$*" in
				*:*) scan_scopes=yes ;;
			esac
		;;
		*)
			case "$*" in
				*:*) scan_scopes=yes ;;
			esac
		;;
	esac

	[ -n "$1" ] || die "${ERROR_MISSING_TYPE}"
	eval "[ \"\${types_${type}}\" = 1 ]" || die "${ERROR_UNAVAILABLE_TYPE}" "${type}"

	if [ "${scan_scopes}" = yes ]; then
		scope_delim='('
		while :; do
			case "$1" in
				:)
					shift && break
				;;
				!)
					[ "$2" = ':' ] || die "${ERROR_MISSING_COLON}"
					bang='!'
					shift 2 && break
				;;
				*!:)
					scopes="${scopes}${scope_delim}${1%!:}"
					bang='!'
					shift && break
				;;
				*:)
					scopes="${scopes}${scope_delim}${1%:}"
					shift && break
				;;
				*!)
					[ "$2" = ':' ] || die "${ERROR_MISSING_COLON}"
					scopes="${scopes}${scope_delim}${1%!}"
					bang='!'
					shift 2 && break
				;;
				*)
					scopes="${scopes}${scope_delim}${1}"
					shift
				;;
			esac
			scope_delim=','
		done
		scopes="${scopes:+${scopes})}"
	fi

	eval "git commit ${options} --message=\"\${type}\${scopes}\${bang}:\${*:+ \$*}\""
}

cmd_print_version() {
	[ $# -eq 0 ] || die "extra argument: '$1'"
	printf 'git-conventional-commit version %s\n' "${VERSION}"
}

case "$1" in
	--version|-v) shift; cmd_print_version "$@" ;;
	*) cmd_conventional_commit "$@" ;;
esac
